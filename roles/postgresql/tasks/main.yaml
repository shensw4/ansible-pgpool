- name: Remove firewalld
  yum:
    name:
      - firewalld
      - firewalld-filesystem
      - python-firewall
    state: absent

- name: Copy offline pgsql rpms 
  copy:
    src: "{{ down_dir }}/{{ pgsql_rpm_relpath }}/"
    dest: "/tmp/{{ pgsql_rpm_relpath }}"
  register: pgsql_copied
  ignore_errors: true
  tags: 
    - pgsql_install
    - pgsql_offline


- block:
  - name: Install pgsql repo online
    yum:
      name: "{{ pgsql_repo }}"
      state: present
  
  - name: Install pgsql online
    yum:
      name: "{{ pgsql_yum }}"
      state: present
  tags: 
    - pgsql_install
    - pgsql_online
  when: pgsql_copied is undefined or pgsql_copied is failed


- block:
  - name: Find pgsql rpms
    find:
      paths: "{{ pgsql_copied.dest }}"
      patterns: "*.rpm"
    register: pgsql_rpms
  
  - name: Get a list of pgsql offline rpms
    set_fact: 
      pgsql_rpm_list: "{{ pgsql_rpms.files | map(attribute='path') | list }}"
    when:
      - pgsql_rpms is defined
  
  - name: Install pgsql offline
    yum:
      name: "{{ pgsql_rpm_list }}"
      state: present
    when: 
      - pgsql_rpm_list is defined
  when: 
    - pgsql_copied is succeeded
  tags: 
    - pgsql_install
    - pgsql_offline


- name: Create some directory for pgsql
  file:
    path: "{{ item }}"
    owner: postgres
    group: postgres
    mode: 0700
    state: directory
  with_items: 
    - "{{ pgdata }}"
    - "{{ pgArchiveDir }}"
  tags: 
    - pgsql_install
    - pgsql_online
    - pgsql_offline


- block:
  - name: Set authorized key for postgres
    authorized_key:
      user: postgres
      state: present
      key: "{{ item }}"
    with_file:
      - "{{ base_dir }}/tmp/id_rsa_pgpool.pub"
  
  - name: Copy private key for postgres
    copy:
      src: "{{ base_dir }}/tmp/id_rsa_pgpool"
      dest: "{{ pghome }}/.ssh/id_rsa_pgpool"
      owner: postgres
      group: postgres
      mode: 0600
  tags: sshkey

  
- block:
  - name: Create PGDATA directory
    file:
      path: '{{ pgdata }}'
      state: directory
      owner: postgres
      group: postgres
      mode: 0700
  
  - name: Replace PGDATA for pgsql systemd unit
    replace:
      path: /usr/lib/systemd/system/postgresql-11.service
      regexp: 'Environment=PGDATA=.*'
      replace: 'Environment=PGDATA={{ pgdata }}/'
  tags: pgdata


- block:
  - name: Check if file exists in the "{{ pgdata }}"
    stat:
      path: "{{ pgdata }}/postgresql.conf"
    register: pgdata_check

  - name: Initialize pgsql
    shell: /usr/pgsql-11/bin/initdb -D "{{ pgdata }}"
    become: true
    become_user: postgres
    when: not pgdata_check.stat.exists

  - name: Copy template postgresql-primary.conf.j2
    template:
      src: postgresql-primary.conf.j2
      dest: "{{ pgdata }}/postgresql.conf"
      owner: postgres
      group: postgres
      mode: 0600

  - name: start pgsql
    systemd:
      name: postgresql-11
      state: started
      enabled: true
      daemon_reload: true

  - name: Wait for pgsql
    wait_for:
      host: 0.0.0.0
      port: "{{ pgport }}"
      state: drained
      timeout: 60

  - name: Copy SQL user template
    template:
      src: setUser.sql.j2
      dest: "{{ pghome }}/setUser.sql"
      owner: postgres
      group: postgres
      mode: 0755
  
  - name: Run SQL user template
    shell: psql -f setUser.sql
    args:
      chdir: "{{ pghome }}"
    become: true
    become_user: postgres

  - name: Delete setUser.sql
    file:
      path: ~/setUser.sql
      state: absent
    become: true
    become_user: postgres

  - name: Copy template pg_hba.conf.j2
    include_tasks: pg_hba.yaml

  - name: restart pgsql
    systemd:
      name: postgresql-11
      state: restarted
  tags: primaryConf
  when: inventory_hostname in groups['pgsqlPrimary']

